{"version":3,"sources":["ChatnelsWidget.tsx"],"names":["ChatnelsWidget","orgDomain","serviceProvider","sessionToken","viewData","onChatnelsEvent","onRequestSession","webviewRef","React","useRef","source","setSource","useState","savedSessionToken","setSavedSessionToken","savedViewData","setSavedViewData","handleMessage","useCallback","event","console","log","nativeEvent","data","type","JSON","parse","e","useEffect","current","run","injectJavaScript","stringify","options","colorScheme","html","baseUrl","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { WebView } from 'react-native-webview';\nimport { htmlTemplate } from './htmlTemplate';\nimport type { ChatnelsWidgetProps, ChatnelsWidgetConfig } from './types';\n\nexport const ChatnelsWidget: React.FC<ChatnelsWidgetProps> = ({\n  orgDomain,\n  serviceProvider = 'chatnels.com',\n  sessionToken,\n  viewData,\n  onChatnelsEvent,\n  onRequestSession,\n}) => {\n  const webviewRef = React.useRef<WebView>(null);\n  const [source, setSource] = React.useState<string>('');\n  const [savedSessionToken, setSavedSessionToken] =\n    React.useState(sessionToken);\n  const [savedViewData, setSavedViewData] =\n    React.useState<ChatnelsWidgetConfig>();\n\n  const handleMessage = React.useCallback(\n    (event) => {\n      console.log('handle Message ,', event.nativeEvent.data);\n      try {\n        const { type, data } = JSON.parse(event.nativeEvent.data);\n\n        if (type === 'reAuth') {\n          if (onRequestSession) {\n            onRequestSession();\n          }\n        } else if (onChatnelsEvent) {\n          onChatnelsEvent(type, data);\n        }\n      } catch (e) {}\n    },\n    [onChatnelsEvent, onRequestSession]\n  );\n\n  React.useEffect(() => {\n    if (orgDomain) {\n      setSource(\n        htmlTemplate(orgDomain, serviceProvider, sessionToken, viewData)\n      );\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (webviewRef.current) {\n      if (sessionToken !== savedSessionToken) {\n        setSavedSessionToken(sessionToken);\n        const run = `\n          if(window.ChatnelsClient) {\n            window.ChatnelsClient.updateSessionToken(\"${sessionToken}\");\n          }\n          true;\n        `;\n        webviewRef.current.injectJavaScript(run);\n      }\n    }\n  }, [sessionToken, savedSessionToken]);\n\n  React.useEffect(() => {\n    try {\n      if (webviewRef.current) {\n        if (JSON.stringify(savedViewData) !== JSON.stringify(viewData)) {\n          setSavedViewData(viewData);\n          const { type, data, options, colorScheme } = viewData;\n          const run = `\n            if(window.ChatnelsClient) {\n              window.ChatnelsClient.showView({\n                type: \"${type}\",\n                data: ${JSON.stringify(data)},\n                options: ${JSON.stringify(options)},\n                colorScheme: ${JSON.stringify(colorScheme)},\n              });\n            }\n            true;\n          `;\n          webviewRef.current.injectJavaScript(run);\n        }\n      }\n    } catch (e) {}\n  }, [viewData, savedViewData]);\n\n  return (\n    <WebView\n      ref={webviewRef}\n      source={{ html: source, baseUrl: 'chatnels://local.chatnels.com/' }}\n      style={{ flex: 1 }}\n      decelerationRate={'fast'}\n      domStorageEnabled={true}\n      injectedJavaScriptForMainFrameOnly={true}\n      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}\n      javaScriptEnabled={true}\n      mixedContentMode={'always'}\n      originWhitelist={['*']}\n      overScrollMode={'never'}\n      thirdPartyCookiesEnabled={true}\n      onMessage={handleMessage}\n    />\n  );\n};\n"]}