{"version":3,"sources":["ChatnelsWidget.tsx"],"names":["ChatnelsWidget","orgDomain","sessionToken","viewData","onRequestSession","webviewRef","React","useRef","source","setSource","useState","savedSessionToken","setSavedSessionToken","savedViewData","setSavedViewData","handleMessage","useCallback","event","console","log","nativeEvent","data","type","JSON","parse","e","useEffect","current","run","injectJavaScript","stringify","html","baseUrl","flex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAGO,MAAMA,cAA6C,GAAG,QAKvD;AAAA,MALwD;AAC5DC,IAAAA,SAD4D;AAE5DC,IAAAA,YAF4D;AAG5DC,IAAAA,QAH4D;AAI5DC,IAAAA;AAJ4D,GAKxD;AACJ,QAAMC,UAAU,GAAGC,KAAK,CAACC,MAAN,CAAsB,IAAtB,CAAnB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,KAAK,CAACI,QAAN,CAAuB,EAAvB,CAA5B;AACA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IACJN,KAAK,CAACI,QAAN,CAAeR,YAAf,CADF;AAEA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCR,KAAK,CAACI,QAAN,EAA1C;AAEA,QAAMK,aAAa,GAAGT,KAAK,CAACU,WAAN,CACnBC,KAAD,IAAW;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,KAAK,CAACG,WAAN,CAAkBC,IAAlD;;AACA,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAWC,IAAI,CAACC,KAAL,CAAWP,KAAK,CAACG,WAAN,CAAkBC,IAA7B,CAAjB;;AAEA,UAAIC,IAAI,KAAK,QAAb,EAAuB;AACrB,YAAIlB,gBAAJ,EAAsB;AACpBA,UAAAA,gBAAgB;AACjB;AACF;AACF,KARD,CAQE,OAAOqB,CAAP,EAAU,CAAE;AACf,GAZmB,EAapB,CAACrB,gBAAD,CAboB,CAAtB;AAgBAE,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AACpB,QAAIzB,SAAJ,EAAe;AACbQ,MAAAA,SAAS,CAAC,gCAAaR,SAAb,EAAwBC,YAAxB,EAAsCC,QAAtC,CAAD,CAAT;AACD;AACF,GAJD,EAIG,EAJH;AAMAG,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AACpB,QAAIrB,UAAU,CAACsB,OAAf,EAAwB;AACtB,UAAIzB,YAAY,KAAKS,iBAArB,EAAwC;AACtCC,QAAAA,oBAAoB,CAACV,YAAD,CAApB;AACA,cAAM0B,GAAG,GAAI;AACrB;AACA,wDAAwD1B,YAAa;AACrE;AACA;AACA,SALQ;AAMAG,QAAAA,UAAU,CAACsB,OAAX,CAAmBE,gBAAnB,CAAoCD,GAApC;AACD;AACF;AACF,GAbD,EAaG,CAAC1B,YAAD,EAAeS,iBAAf,CAbH;AAeAL,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AACpB,QAAIrB,UAAU,CAACsB,OAAf,EAAwB;AACtB,UAAIJ,IAAI,CAACO,SAAL,CAAejB,aAAf,MAAkCU,IAAI,CAACO,SAAL,CAAe3B,QAAf,CAAtC,EAAgE;AAC9DW,QAAAA,gBAAgB,CAACX,QAAD,CAAhB;AACA,cAAM;AAAEmB,UAAAA,IAAF;AAAQD,UAAAA;AAAR,YAAiBlB,QAAvB;AACA,cAAMyB,GAAG,GAAI;AACrB;AACA,4CAA4CN,IAAK,MAAKC,IAAI,CAACO,SAAL,CAAeT,IAAf,CAAqB;AAC3E;AACA;AACA,OALQ;AAMAhB,QAAAA,UAAU,CAACsB,OAAX,CAAmBE,gBAAnB,CAAoCD,GAApC;AACD;AACF;AACF,GAdD,EAcG,CAACzB,QAAD,EAAWU,aAAX,CAdH;AAgBA,sBACE,oBAAC,2BAAD;AACE,IAAA,GAAG,EAAER,UADP;AAEE,IAAA,MAAM,EAAE;AAAE0B,MAAAA,IAAI,EAAEvB,MAAR;AAAgBwB,MAAAA,OAAO,EAAE;AAAzB,KAFV;AAGE,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAHT;AAIE,IAAA,gBAAgB,EAAE,MAJpB;AAKE,IAAA,iBAAiB,EAAE,IALrB;AAME,IAAA,kCAAkC,EAAE,IANtC;AAOE,IAAA,qDAAqD,EAAE,IAPzD;AAQE,IAAA,iBAAiB,EAAE,IARrB;AASE,IAAA,gBAAgB,EAAE,QATpB;AAUE,IAAA,eAAe,EAAE,CAAC,GAAD,CAVnB;AAWE,IAAA,cAAc,EAAE,OAXlB;AAYE,IAAA,wBAAwB,EAAE,IAZ5B;AAaE,IAAA,SAAS,EAAElB;AAbb,IADF;AAiBD,CAlFM","sourcesContent":["import * as React from 'react';\nimport { WebView } from 'react-native-webview';\nimport { htmlTemplate } from './htmlTemplate';\nimport type { ChatnelsWidgetProps, ChatnelsViewData } from './types';\n\nexport const ChatnelsWidget: React.FC<ChatnelsWidgetProps> = ({\n  orgDomain,\n  sessionToken,\n  viewData,\n  onRequestSession,\n}) => {\n  const webviewRef = React.useRef<WebView>(null);\n  const [source, setSource] = React.useState<string>('');\n  const [savedSessionToken, setSavedSessionToken] =\n    React.useState(sessionToken);\n  const [savedViewData, setSavedViewData] = React.useState<ChatnelsViewData>();\n\n  const handleMessage = React.useCallback(\n    (event) => {\n      console.log('handle Message ,', event.nativeEvent.data);\n      try {\n        const { type } = JSON.parse(event.nativeEvent.data);\n\n        if (type === 'reAuth') {\n          if (onRequestSession) {\n            onRequestSession();\n          }\n        }\n      } catch (e) {}\n    },\n    [onRequestSession]\n  );\n\n  React.useEffect(() => {\n    if (orgDomain) {\n      setSource(htmlTemplate(orgDomain, sessionToken, viewData));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (webviewRef.current) {\n      if (sessionToken !== savedSessionToken) {\n        setSavedSessionToken(sessionToken);\n        const run = `\n          if(window.ChatnelsClient) {\n            window.ChatnelsClient.updateSessionToken(\"${sessionToken}\");\n          }\n          true;\n        `;\n        webviewRef.current.injectJavaScript(run);\n      }\n    }\n  }, [sessionToken, savedSessionToken]);\n\n  React.useEffect(() => {\n    if (webviewRef.current) {\n      if (JSON.stringify(savedViewData) !== JSON.stringify(viewData)) {\n        setSavedViewData(viewData);\n        const { type, data } = viewData;\n        const run = `\n        if(window.ChatnelsClient) {\n          window.ChatnelsClient.showView(\"${type}\", ${JSON.stringify(data)});\n        }\n        true;\n      `;\n        webviewRef.current.injectJavaScript(run);\n      }\n    }\n  }, [viewData, savedViewData]);\n\n  return (\n    <WebView\n      ref={webviewRef}\n      source={{ html: source, baseUrl: 'chatnels://local.chatnels.com/' }}\n      style={{ flex: 1 }}\n      decelerationRate={'fast'}\n      domStorageEnabled={true}\n      injectedJavaScriptForMainFrameOnly={true}\n      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}\n      javaScriptEnabled={true}\n      mixedContentMode={'always'}\n      originWhitelist={['*']}\n      overScrollMode={'never'}\n      thirdPartyCookiesEnabled={true}\n      onMessage={handleMessage}\n    />\n  );\n};\n"]}