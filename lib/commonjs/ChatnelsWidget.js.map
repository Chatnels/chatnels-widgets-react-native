{"version":3,"sources":["ChatnelsWidget.tsx"],"names":["ChatnelsWidget","orgDomain","serviceProvider","sessionToken","viewData","onChatnelsEvent","onReady","onRequestSession","onError","webviewRef","React","useRef","source","setSource","useState","savedSessionToken","setSavedSessionToken","savedViewData","setSavedViewData","handleError","useCallback","e","handleMessage","event","type","data","JSON","parse","nativeEvent","useEffect","current","run","injectJavaScript","stringify","options","colorScheme","html","baseUrl","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { WebView } from 'react-native-webview';\nimport { htmlTemplate } from './htmlTemplate';\nimport type { ChatnelsWidgetProps, ChatnelsWidgetConfig } from './types';\n\nexport const ChatnelsWidget: React.FC<ChatnelsWidgetProps> = ({\n  orgDomain,\n  serviceProvider = 'chatnels.com',\n  sessionToken,\n  viewData,\n  onChatnelsEvent,\n  onReady,\n  onRequestSession,\n  onError,\n}) => {\n  const webviewRef = React.useRef<WebView>(null);\n  const [source, setSource] = React.useState<string>('');\n  const [savedSessionToken, setSavedSessionToken] =\n    React.useState(sessionToken);\n  const [savedViewData, setSavedViewData] =\n    React.useState<ChatnelsWidgetConfig>();\n\n  const handleError = React.useCallback(\n    (e) => {\n      if (onError) {\n        onError(e);\n      }\n    },\n    [onError]\n  );\n\n  const handleMessage = React.useCallback(\n    (event) => {\n      try {\n        const { type, data } = JSON.parse(event.nativeEvent.data);\n\n        if (type === 'reAuth') {\n          if (onRequestSession) {\n            onRequestSession();\n          }\n        } else if (type === 'app:ready') {\n          if (onReady) {\n            onReady();\n          }\n        } else if (onChatnelsEvent) {\n          onChatnelsEvent(type, data);\n        }\n      } catch (e) {}\n    },\n    [onChatnelsEvent, onReady, onRequestSession]\n  );\n\n  React.useEffect(() => {\n    if (orgDomain) {\n      setSource(\n        htmlTemplate(orgDomain, serviceProvider, sessionToken, viewData)\n      );\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (webviewRef.current) {\n      if (sessionToken !== savedSessionToken) {\n        setSavedSessionToken(sessionToken);\n        const run = `\n          if(window.ChatnelsClient) {\n            window.ChatnelsClient.updateSessionToken(\"${sessionToken}\");\n          }\n          true;\n        `;\n        webviewRef.current.injectJavaScript(run);\n      }\n    }\n  }, [sessionToken, savedSessionToken]);\n\n  React.useEffect(() => {\n    try {\n      if (webviewRef.current) {\n        if (JSON.stringify(savedViewData) !== JSON.stringify(viewData)) {\n          setSavedViewData(viewData);\n          const { type, data, options, colorScheme } = viewData;\n          const run = `\n            if(window.ChatnelsClient) {\n              window.ChatnelsClient.showView({\n                type: \"${type}\",\n                data: ${JSON.stringify(data)},\n                options: ${JSON.stringify(options)},\n                colorScheme: ${JSON.stringify(colorScheme)},\n              });\n            }\n            true;\n          `;\n          webviewRef.current.injectJavaScript(run);\n        }\n      }\n    } catch (e) {}\n  }, [viewData, savedViewData]);\n\n  return (\n    <WebView\n      ref={webviewRef}\n      source={{ html: source, baseUrl: 'chatnels://local.chatnels.com/' }}\n      style={{ flex: 1 }}\n      decelerationRate={'fast'}\n      domStorageEnabled={true}\n      injectedJavaScriptForMainFrameOnly={true}\n      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}\n      javaScriptEnabled={true}\n      mixedContentMode={'always'}\n      originWhitelist={['*']}\n      overScrollMode={'never'}\n      thirdPartyCookiesEnabled={true}\n      onMessage={handleMessage}\n      onError={handleError}\n    />\n  );\n};\n"]}