{"version":3,"sources":["ChatnelsWidget.tsx"],"names":["React","WebView","htmlTemplate","ChatnelsWidget","orgDomain","sessionToken","viewData","webviewRef","useRef","source","setSource","useState","savedSessionToken","setSavedSessionToken","savedViewData","setSavedViewData","handleMessage","useCallback","event","console","log","useEffect","current","run","injectJavaScript","JSON","stringify","type","data","html","baseUrl","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { WebView } from 'react-native-webview';\nimport { htmlTemplate } from './htmlTemplate';\nimport type { ChatnelsWidgetProps, ChatnelsViewData } from './types';\n\n// const jsTemplate = (orgDomain: string, sessionToken?: string) =>\n//   `(function() {\n//     window.ReactNativeWebView.postMessage(JSON.stringify(window.location));\n//     window.chatnelsAsync = function() {\n//       if(window.ChatnelsClient) {\n//         window.ChatnelsClient.load({ domain: \"${orgDomain}\", sessionToken: \"${sessionToken}\" })\n//       }\n//     }\n//   })();`;\n\nexport const ChatnelsWidget: React.FC<ChatnelsWidgetProps> = ({\n  orgDomain,\n  sessionToken,\n  viewData,\n}) => {\n  const webviewRef = React.useRef<WebView>(null);\n  const [source, setSource] = React.useState<string>('');\n  const [savedSessionToken, setSavedSessionToken] =\n    React.useState(sessionToken);\n  const [savedViewData, setSavedViewData] = React.useState<ChatnelsViewData>();\n\n  const handleMessage = React.useCallback((event) => {\n    console.log('handle Message ,', event);\n  }, []);\n\n  React.useEffect(() => {\n    if (orgDomain) {\n      setSource(htmlTemplate(orgDomain, sessionToken, viewData));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (webviewRef.current) {\n      if (sessionToken !== savedSessionToken) {\n        setSavedSessionToken(sessionToken);\n        const run = `\n          if(window.ChatnelsClient) {\n            window.ChatnelsClient.setSessionToken(\"${sessionToken}\");\n          }\n          true;\n        `;\n        webviewRef.current.injectJavaScript(run);\n      }\n    }\n  }, [sessionToken, savedSessionToken]);\n\n  React.useEffect(() => {\n    if (webviewRef.current) {\n      if (JSON.stringify(savedViewData) !== JSON.stringify(viewData)) {\n        setSavedViewData(viewData);\n        const { type, data } = viewData;\n        const run = `\n        if(window.ChatnelsClient) {\n          window.ChatnelsClient.showView(\"${type}\", ${data});\n        }\n        true;\n      `;\n        webviewRef.current.injectJavaScript(run);\n      }\n    }\n  }, [viewData, savedViewData]);\n\n  return (\n    <WebView\n      ref={webviewRef}\n      source={{ html: source, baseUrl: 'chatnels://local.chatnels.com/' }}\n      style={{ flex: 1 }}\n      domStorageEnabled={true}\n      injectedJavaScriptForMainFrameOnly={true}\n      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}\n      javaScriptEnabled={true}\n      mixedContentMode={'always'}\n      originWhitelist={['*']}\n      overScrollMode={'never'}\n      thirdPartyCookiesEnabled={true}\n      onMessage={handleMessage}\n    />\n  );\n};\n"]}