{"version":3,"sources":["ChatnelsWidget.tsx"],"names":["React","Button","Text","View","WebView","htmlTemplate","ChatnelsEventsType","ChatnelsWidget","forwardRef","ref","orgDomain","serviceProvider","sessionToken","viewData","onChatnelsEvent","onReady","onRequestSession","onError","webviewRef","useRef","webviewKey","setWebviewKey","useState","source","setSource","savedSessionToken","setSavedSessionToken","savedViewData","setSavedViewData","hasError","setHasError","processDidTerminated","setProcessDidTerminated","injectEmbedData","useCallback","embedData","current","type","data","options","colorScheme","run","JSON","stringify","injectJavaScript","undefined","handleContentProcessDidTerminate","handleError","e","handleMessage","event","parse","nativeEvent","LOAD_SCRIPT_ERROR","Error","APP_READY","APP_REQUEST_FOCUS","requestFocus","handleReload","handleShouldStartLoadWithRequest","request","url","EXTERNAL_URL","useEffect","useImperativeHandle","refresh","flex","html","baseUrl","backgroundColor","top","bottom","left","right","position","display","flexDirection","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, Text, View } from 'react-native';\nimport { WebView } from 'react-native-webview';\nimport { htmlTemplate } from './htmlTemplate';\nimport type {\n  ChatnelsWidgetProps,\n  ChatnelsWidgetConfig,\n  ChatnelsWidgetHandle,\n} from './types';\nimport { ChatnelsEventsType } from './enums';\n\nexport const ChatnelsWidget = React.forwardRef<\n  ChatnelsWidgetHandle,\n  ChatnelsWidgetProps\n>(\n  (\n    {\n      orgDomain,\n      serviceProvider = 'chatnels.com',\n      sessionToken,\n      viewData,\n      onChatnelsEvent,\n      onReady,\n      onRequestSession,\n      onError,\n    },\n    ref\n  ) => {\n    const webviewRef = React.useRef<WebView>(null);\n    const [webviewKey, setWebviewKey] = React.useState(0);\n    const [source, setSource] = React.useState<string>('');\n    const [savedSessionToken, setSavedSessionToken] =\n      React.useState(sessionToken);\n    const [savedViewData, setSavedViewData] =\n      React.useState<ChatnelsWidgetConfig>();\n    const [hasError, setHasError] = React.useState(false);\n    const [processDidTerminated, setProcessDidTerminated] =\n      React.useState(false);\n\n    const injectEmbedData = React.useCallback(\n      (embedData: ChatnelsWidgetConfig) => {\n        if (webviewRef.current) {\n          const { type, data, options, colorScheme } = embedData;\n          let run = `\n            if(window.ChatnelsClient) {\n              window.ChatnelsClient.showView({\n                type: \"${type}\",\n                data: ${JSON.stringify(data)},\n                options: ${JSON.stringify(options)},\n                colorScheme: ${JSON.stringify(colorScheme)},\n              });\n            }\n            true;\n          `;\n          webviewRef.current.injectJavaScript(run);\n          // @ts-ignore\n          run = undefined;\n        }\n      },\n      []\n    );\n\n    const handleContentProcessDidTerminate = React.useCallback(() => {\n      setProcessDidTerminated(true);\n      setWebviewKey(webviewKey + 1);\n    }, [webviewKey]);\n\n    const handleError = React.useCallback(\n      (e: any) => {\n        setHasError(true);\n\n        if (onError) {\n          onError(e);\n        }\n      },\n      [onError]\n    );\n\n    const handleMessage = React.useCallback(\n      (event) => {\n        try {\n          const { type, data } = JSON.parse(event.nativeEvent.data);\n\n          if (type === ChatnelsEventsType.LOAD_SCRIPT_ERROR) {\n            handleError(new Error(data));\n          } else if (type === 'reAuth') {\n            if (onRequestSession) {\n              onRequestSession();\n            }\n          } else if (type === ChatnelsEventsType.APP_READY) {\n            // if the process is terminated, resend the embed data after onReady\n            if (processDidTerminated) {\n              setProcessDidTerminated(false);\n              if (savedViewData) {\n                injectEmbedData(savedViewData);\n              }\n            }\n\n            if (onReady) {\n              onReady();\n            }\n          } else if (type === ChatnelsEventsType.APP_REQUEST_FOCUS) {\n            webviewRef.current?.requestFocus();\n          } else if (onChatnelsEvent) {\n            onChatnelsEvent(type, data);\n          }\n        } catch (e) {}\n      },\n      [\n        handleError,\n        injectEmbedData,\n        onChatnelsEvent,\n        onReady,\n        onRequestSession,\n        processDidTerminated,\n        savedViewData,\n        webviewRef,\n      ]\n    );\n\n    const handleReload = React.useCallback(() => {\n      setHasError(false);\n      setWebviewKey(webviewKey + 1);\n    }, [webviewKey]);\n\n    const handleShouldStartLoadWithRequest = React.useCallback(\n      (request) => {\n        if (\n          request.url === 'chatnels://local.chatnels.com/' ||\n          request.url === 'about:blank'\n        ) {\n          return true;\n        } else {\n          if (onChatnelsEvent) {\n            onChatnelsEvent(ChatnelsEventsType.EXTERNAL_URL, {\n              url: request.url,\n            });\n          }\n          return false;\n        }\n      },\n      [onChatnelsEvent]\n    );\n\n    React.useEffect(() => {\n      if (orgDomain) {\n        setSource(\n          htmlTemplate(orgDomain, serviceProvider, sessionToken, viewData)\n        );\n      }\n    }, []);\n\n    React.useEffect(() => {\n      if (webviewRef.current) {\n        if (sessionToken !== savedSessionToken) {\n          setSavedSessionToken(sessionToken);\n          let run = `\n          if(window.ChatnelsClient) {\n            window.ChatnelsClient.updateSessionToken(\"${sessionToken}\");\n          }\n          true;\n        `;\n          webviewRef.current.injectJavaScript(run);\n          // @ts-ignore\n          run = undefined;\n        }\n      }\n    }, [sessionToken, savedSessionToken]);\n\n    React.useEffect(() => {\n      try {\n        if (webviewRef.current) {\n          if (JSON.stringify(savedViewData) !== JSON.stringify(viewData)) {\n            setSavedViewData(viewData);\n            injectEmbedData(viewData);\n          }\n        }\n      } catch (e) {}\n    }, [injectEmbedData, savedViewData, viewData]);\n\n    React.useImperativeHandle(\n      ref,\n      () => ({\n        refresh: handleReload,\n      }),\n      [handleReload]\n    );\n\n    return (\n      <View style={{ flex: 1 }}>\n        <WebView\n          ref={webviewRef}\n          key={webviewKey}\n          source={{ html: source, baseUrl: 'chatnels://local.chatnels.com/' }}\n          style={{ flex: 1 }}\n          bounces={true}\n          decelerationRate={'fast'}\n          domStorageEnabled={true}\n          injectedJavaScriptForMainFrameOnly={true}\n          injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}\n          javaScriptEnabled={true}\n          keyboardDisplayRequiresUserAction={false}\n          mixedContentMode={'always'}\n          originWhitelist={['*']}\n          overScrollMode={'never'}\n          scrollEnabled={false}\n          thirdPartyCookiesEnabled={true}\n          onContentProcessDidTerminate={handleContentProcessDidTerminate}\n          onMessage={handleMessage}\n          onShouldStartLoadWithRequest={handleShouldStartLoadWithRequest}\n          onError={handleError}\n        />\n        {hasError && (\n          <View\n            style={{\n              backgroundColor: 'white',\n              top: 0,\n              bottom: 0,\n              left: 0,\n              right: 0,\n              position: 'absolute',\n              flex: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <Text>Unable to connect to service.</Text>\n            <Text>Please try again later.</Text>\n            <Button title=\"Retry\" onPress={handleReload} />\n          </View>\n        )}\n      </View>\n    );\n  }\n);\n"]}