{"version":3,"sources":["ChatnelsWidget.tsx"],"names":["React","WebView","htmlTemplate","ChatnelsWidget","orgDomain","serviceProvider","sessionToken","viewData","onChatnelsEvent","onRequestSession","webviewRef","useRef","source","setSource","useState","savedSessionToken","setSavedSessionToken","savedViewData","setSavedViewData","handleMessage","useCallback","event","console","log","nativeEvent","data","type","JSON","parse","e","useEffect","current","run","injectJavaScript","stringify","html","baseUrl","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { WebView } from 'react-native-webview';\nimport { htmlTemplate } from './htmlTemplate';\nimport type { ChatnelsWidgetProps, ChatnelsViewData } from './types';\n\nexport const ChatnelsWidget: React.FC<ChatnelsWidgetProps> = ({\n  orgDomain,\n  serviceProvider = 'chatnels.com',\n  sessionToken,\n  viewData,\n  onChatnelsEvent,\n  onRequestSession,\n}) => {\n  const webviewRef = React.useRef<WebView>(null);\n  const [source, setSource] = React.useState<string>('');\n  const [savedSessionToken, setSavedSessionToken] =\n    React.useState(sessionToken);\n  const [savedViewData, setSavedViewData] = React.useState<ChatnelsViewData>();\n\n  const handleMessage = React.useCallback(\n    (event) => {\n      console.log('handle Message ,', event.nativeEvent.data);\n      try {\n        const { type, data } = JSON.parse(event.nativeEvent.data);\n\n        if (type === 'reAuth') {\n          if (onRequestSession) {\n            onRequestSession();\n          }\n        } else if (onChatnelsEvent) {\n          onChatnelsEvent(type, data);\n        }\n      } catch (e) {}\n    },\n    [onChatnelsEvent, onRequestSession]\n  );\n\n  React.useEffect(() => {\n    if (orgDomain) {\n      setSource(\n        htmlTemplate(orgDomain, serviceProvider, sessionToken, viewData)\n      );\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (webviewRef.current) {\n      if (sessionToken !== savedSessionToken) {\n        setSavedSessionToken(sessionToken);\n        const run = `\n          if(window.ChatnelsClient) {\n            window.ChatnelsClient.updateSessionToken(\"${sessionToken}\");\n          }\n          true;\n        `;\n        webviewRef.current.injectJavaScript(run);\n      }\n    }\n  }, [sessionToken, savedSessionToken]);\n\n  React.useEffect(() => {\n    if (webviewRef.current) {\n      if (JSON.stringify(savedViewData) !== JSON.stringify(viewData)) {\n        setSavedViewData(viewData);\n        const { type, data } = viewData;\n        const run = `\n        if(window.ChatnelsClient) {\n          window.ChatnelsClient.showView(\"${type}\", ${JSON.stringify(data)});\n        }\n        true;\n      `;\n        webviewRef.current.injectJavaScript(run);\n      }\n    }\n  }, [viewData, savedViewData]);\n\n  return (\n    <WebView\n      ref={webviewRef}\n      source={{ html: source, baseUrl: 'chatnels://local.chatnels.com/' }}\n      style={{ flex: 1 }}\n      decelerationRate={'fast'}\n      domStorageEnabled={true}\n      injectedJavaScriptForMainFrameOnly={true}\n      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}\n      javaScriptEnabled={true}\n      mixedContentMode={'always'}\n      originWhitelist={['*']}\n      overScrollMode={'never'}\n      thirdPartyCookiesEnabled={true}\n      onMessage={handleMessage}\n    />\n  );\n};\n"]}