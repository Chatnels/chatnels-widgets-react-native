{"version":3,"sources":["ChatnelsWidget.tsx"],"names":["React","Button","Text","View","WebView","htmlTemplate","ChatnelsWidget","orgDomain","serviceProvider","sessionToken","viewData","onChatnelsEvent","onReady","onRequestSession","onError","webviewRef","useRef","webviewKey","setWebviewKey","useState","source","setSource","savedSessionToken","setSavedSessionToken","savedViewData","setSavedViewData","hasError","setHasError","handleError","useCallback","e","handleMessage","event","type","data","JSON","parse","nativeEvent","Error","handleReload","useEffect","current","run","injectJavaScript","stringify","options","colorScheme","flex","html","baseUrl","top","bottom","left","right","position","display","flexDirection","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, Text, View } from 'react-native';\nimport { WebView } from 'react-native-webview';\nimport { htmlTemplate } from './htmlTemplate';\nimport type { ChatnelsWidgetProps, ChatnelsWidgetConfig } from './types';\n\nexport const ChatnelsWidget: React.FC<ChatnelsWidgetProps> = ({\n  orgDomain,\n  serviceProvider = 'chatnels.com',\n  sessionToken,\n  viewData,\n  onChatnelsEvent,\n  onReady,\n  onRequestSession,\n  onError,\n}) => {\n  const webviewRef = React.useRef<WebView>(null);\n  const [webviewKey, setWebviewKey] = React.useState<number>(1);\n  const [source, setSource] = React.useState<string>('');\n  const [savedSessionToken, setSavedSessionToken] =\n    React.useState(sessionToken);\n  const [savedViewData, setSavedViewData] =\n    React.useState<ChatnelsWidgetConfig>();\n  const [hasError, setHasError] = React.useState(false);\n\n  const handleError = React.useCallback(\n    (e: any) => {\n      setHasError(true);\n\n      if (onError) {\n        onError(e);\n      }\n    },\n    [onError]\n  );\n\n  const handleMessage = React.useCallback(\n    (event) => {\n      try {\n        const { type, data } = JSON.parse(event.nativeEvent.data);\n\n        if (type === 'loadScriptError') {\n          handleError(new Error(data));\n        } else if (type === 'reAuth') {\n          if (onRequestSession) {\n            onRequestSession();\n          }\n        } else if (type === 'app:ready') {\n          if (onReady) {\n            onReady();\n          }\n        } else if (onChatnelsEvent) {\n          onChatnelsEvent(type, data);\n        }\n      } catch (e) {}\n    },\n    [onChatnelsEvent, onReady, onRequestSession, handleError]\n  );\n\n  // const handleRenderError = React.useCallback(\n  //   (errorDomain, errorCode, errorDesc) => {\n  //     return <></>;\n  //   },\n  //   []\n  // );\n\n  const handleReload = React.useCallback(() => {\n    setHasError(false);\n    setWebviewKey(webviewKey + 1);\n  }, [webviewKey]);\n\n  React.useEffect(() => {\n    if (orgDomain) {\n      setSource(\n        htmlTemplate(orgDomain, serviceProvider, sessionToken, viewData)\n      );\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (webviewRef.current) {\n      if (sessionToken !== savedSessionToken) {\n        setSavedSessionToken(sessionToken);\n        const run = `\n          if(window.ChatnelsClient) {\n            window.ChatnelsClient.updateSessionToken(\"${sessionToken}\");\n          }\n          true;\n        `;\n        webviewRef.current.injectJavaScript(run);\n      }\n    }\n  }, [sessionToken, savedSessionToken]);\n\n  React.useEffect(() => {\n    try {\n      if (webviewRef.current) {\n        if (JSON.stringify(savedViewData) !== JSON.stringify(viewData)) {\n          setSavedViewData(viewData);\n          const { type, data, options, colorScheme } = viewData;\n          const run = `\n            if(window.ChatnelsClient) {\n              window.ChatnelsClient.showView({\n                type: \"${type}\",\n                data: ${JSON.stringify(data)},\n                options: ${JSON.stringify(options)},\n                colorScheme: ${JSON.stringify(colorScheme)},\n              });\n            }\n            true;\n          `;\n          webviewRef.current.injectJavaScript(run);\n        }\n      }\n    } catch (e) {}\n  }, [viewData, savedViewData]);\n\n  return (\n    <View style={{ flex: 1 }}>\n      <WebView\n        key={webviewKey}\n        ref={webviewRef}\n        source={{ html: source, baseUrl: 'https://local.chatnels.com/' }}\n        style={{ flex: 1 }}\n        bounces={true}\n        decelerationRate={'fast'}\n        domStorageEnabled={true}\n        injectedJavaScriptForMainFrameOnly={true}\n        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}\n        javaScriptEnabled={true}\n        mixedContentMode={'always'}\n        originWhitelist={['*']}\n        overScrollMode={'never'}\n        scrollEnabled={false}\n        thirdPartyCookiesEnabled={true}\n        onMessage={handleMessage}\n        onError={handleError}\n      />\n      {hasError && (\n        <View\n          style={{\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            position: 'absolute',\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Text>Unable to connect to service. Please try again later.</Text>\n          <Button title=\"Retry\" onPress={handleReload} />\n        </View>\n      )}\n    </View>\n  );\n};\n"]}